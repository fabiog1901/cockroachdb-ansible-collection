---
- name: Add the user cockroach
  ansible.builtin.user:
    name: cockroach
    shell: /bin/bash

- name: Create default CockroachDB directory
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    recurse: yes
    owner: cockroach
    group: cockroach
  loop:
    - /var/lib/cockroach
    - /mnt/cockroach

- when: cockroachdb_encryption
  block:
    - name: copy new EAR key
      copy:
        src: "{{ cockroachdb_encryption_key_new }}"
        dest: /var/lib/cockroach/ear-128.key
        owner: cockroach
        group: cockroach
        mode: "0400"

    - name: copy old EAR key
      copy:
        src: "{{ cockroachdb_encryption_key_old }}"
        dest: /var/lib/cockroach/old-ear-128.key
        owner: cockroach
        group: cockroach
        mode: "0400"
      when: cockroachdb_encryption_key_old is defined

- name: copy certs
  when: cockroachdb_secure
  block:
    - name: Create certs directory if it does not exist
      file:
        path: /var/lib/cockroach/certs
        state: directory
        owner: cockroach
        group: cockroach
        mode: "0755"

    - name: copy CA certificate
      copy:
        src: "{{ cockroachdb_certificates_dir }}/ca/ca.crt"
        dest: /var/lib/cockroach/certs/ca.crt

    - name: copy node certificate
      copy:
        src: "{{ cockroachdb_certificates_dir }}/certs/node.{{ inventory_hostname }}.crt"
        dest: /var/lib/cockroach/certs/node.crt

    - name: copy node key
      copy:
        src: "{{ cockroachdb_certificates_dir }}/certs/node.{{ inventory_hostname }}.key"
        dest: /var/lib/cockroach/certs/node.key
        owner: cockroach
        group: cockroach
        mode: "0400"

    - name: copy client certificates crt
      copy:
        src: "{{ cockroachdb_certificates_dir }}/certs/client.{{ item }}.crt"
        dest: /var/lib/cockroach/certs
        mode: "0400"
      loop: "{{ cockroachdb_certificates_clients }}"

    - name: copy client certificates key
      copy:
        src: "{{ cockroachdb_certificates_dir }}/certs/client.{{ item }}.key"
        dest: /var/lib/cockroach/certs
        mode: "0400"
      loop: "{{ cockroachdb_certificates_clients }}"
  tags:
    - certificates
    
- name: find attached disks
  shell: |
    lsblk -o NAME,TYPE,SIZE -p -n -b -s | \
      awk '$NF ~ /[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/' | \
      grep -v '└─' | \
      grep disk | \
      awk '{print $1}'
  args:
    executable: /bin/bash
  register: _disks

- when: _disks.stdout_lines | length > 0
  block:
    - name: Create default CockroachDB directory
      file:
        path: "/mnt/cockroach{{ idx }}"
        state: directory
        mode: "0755"
        recurse: yes
        owner: cockroach
        group: cockroach
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: mount the disks
      ansible.posix.mount:
        path: "/mnt/cockroach{{ idx }}"
        src: "{{ item }}"
        fstype: ext4
        state: mounted
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Reset permissions on mounted directory /mnt/cockroach
      file:
        path: "/mnt/cockroach{{ idx }}"
        state: directory
        mode: "0755"
        owner: cockroach
        group: cockroach
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: reset cockroachdb_store
      set_fact:
        cockroachdb_store: []

    - name: set cockroachdb_store
      set_fact:
        cockroachdb_store: "{{ cockroachdb_store + ['/mnt/cockroach' + idx|string] }}"
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

- name: create individual systemd unit file for each NUMA node
  when: ansible_numa_nodes > 1
  include_tasks: numa_copy_systemd.yml
  loop: "{{ range(ansible_numa_nodes) }}"
  loop_control:
    index_var: numa_idx

- when: ansible_numa_nodes <= 1
  name: copy systemd template cockroachdb.service
  template:
    src: cockroachdb.service.j2
    dest: /etc/systemd/system/cockroachdb.service
    mode: 0644
    owner: root
    group: root
    backup: yes
    force: yes
