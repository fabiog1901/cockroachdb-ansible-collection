---
- name: get list of current VMs via the count_tag
  google.cloud.gcp_compute_instance_info:
    project: "{{ gcp_project }}"
    zone: "{{ _grp.region | default(_infra_item.region) }}-{{ _infra_item.zone | default(_grp.zone) | default('') }}"
    filters:
      - labels.deployment_id = {{ deployment_id }}
      - labels.cluster_name = {{ _infra_item.cluster_name | default(_cluster_name) }}
  register: _vms

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    port: 22
    timeout: 360
    sleep: 5
    state: started
  loop: "{{ _vms.resources }}"

- name: add instances to inventory groups
  add_host:
    name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    groups: "{{ (_vms.resources[0].metadata['items'] | items2dict).ansible_inv_groups  | from_json + [(_vms.resources[0].metadata['items'] | items2dict).ansible_cluster_name]  }}"
    cluster_name: "{{ (_vms.resources[0].metadata['items'] | items2dict).ansible_cluster_name }}"
    cloud: gcp
    region: "{{ (_vms.resources[0].metadata['items'] | items2dict).region }}"
    zone: "{{ (_vms.resources[0].metadata['items'] | items2dict).zone }}"
    ansible_user: "{{ (_vms.resources[0].metadata['items'] | items2dict).ansible_user }}"
    extra_vars: "{{ (_vms.resources[0].metadata['items'] | items2dict).extra_vars  | from_json }}"
    
    public_hostname: "{{ item.networkInterfaces[0].accessConfigs[0].natIP.split('.')[3] }}.{{ item.networkInterfaces[0].accessConfigs[0].natIP.split('.')[2] }}.{{ item.networkInterfaces[0].accessConfigs[0].natIP.split('.')[1] }}.{{ item.networkInterfaces[0].accessConfigs[0].natIP.split('.')[0] }}.bc.googleusercontent.com"
    public_ip: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    private_hostname: "{{ item.name }}.c.{{ gcp_project }}.internal"
    private_ip: "{{ item.networkInterfaces[0].networkIP }}"
  loop: "{{ _vms.resources }}"
