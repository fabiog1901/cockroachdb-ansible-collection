---
- name: set vars to build 'name'
  set_fact:
    _id: "{{ deployment_id }}"
    _cl_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}-{{ _idx }}"
    _type: "{{ _grp.tags.Name | default(_grp.inventory_groups[0]) | default(_infra_item.inventory_groups[0]) | regex_replace('[^A-Za-z0-9]', '') }}-{{ _grp_idx }}"
    _image: "{{ _grp.image | default(_infra_item.image) }}"
    _user: "{{ _grp.user | default(_infra_item.user) | default('') }}"
    _instance_type: "{{ _grp.instance_type | default(_infra_item.instance_type) | default('') }}"
    _instance: "{{ _grp.instance | default(_infra_item.instance) | default({}) }}"
    _cloud: "{{ _grp.cloud | default(_infra_item.cloud) }}"

- name: set ansible tags
  set_fact:
    #_count_tag: "{{ (deployment_id + '-' + _cl_name + '-' + _type) | lower }}"
    _t0:
      # ansible_id: "{{ deployment_id }}-{{ _cl_name }}-{{ _type }}-{{ item }}"
      ansible_cluster_name: "{{ _cl_name }}"
      ansible_inv_groups: "{{ _grp.inventory_groups | default([]) | union(_infra_item.inventory_groups | default([])) | to_json }}"
      extra_vars: "{{ _grp.extra_vars | default({}) | to_json }}"
      cluster_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}"
      region: "{{ _infra_item.region | default(_grp.region) | default('') }}"
      zone: "{{ _infra_item.zone | default(_grp.zone) | default('') }}"
      ansible_user: "{{ _user }}"
      ansible_count_tag: "{{ deployment_id }}-{{ _cl_name }}-{{ _type }}"

- name: combine all tags
  set_fact:
    _t1: "{{ _grp.tags | default({}) }}"
    _t2: "{{ _infra_item.tags | default({}) }}"

- name: combine all tags to final tags dict
  set_fact:
    _t3: "{{ _t1 | combine(_t2) | combine(_t0) }}"

# trick to map a dict to another dict
- name: create OS volumes fact
  set_fact:
    _osvol:
      - device_name: "{{ _grp.volumes.os.name | default(_infra_item.volumes.os.name) | default(volume_type[_cloud].name) }}"
        volume_size: "{{ _grp.volumes.os.size | default(_infra_item.volumes.os.size) | default(volume_type[_cloud].size) }}"
        volume_type: "{{ volume_type[_cloud][_grp.volumes.os.type | default(_infra_item.volumes.os.type) | default(volume_type[_cloud].type)] }}"
        delete_on_termination: "{{ _grp.volumes.os.delete_on_termination | default(_infra_item.volumes.os.delete_on_termination) | default(volume_type[_cloud].delete_on_termination) }}"

# trick to map a dict to another dict
- name: create volumes fact
  set_fact:
    _vol:
      device_name: "{{ item.name | default(volume_type[_cloud].datadiskprefix + volumemap[i+1] ) }}"
      volume_type: "{{ volume_type[_cloud][item.type | default(volume_type[_cloud].type)] }}"
      volume_size: "{{ item.size }}"
      delete_on_termination: "{{ item.delete_on_termination | default(volume_type[_cloud].delete_on_termination) }}"
      iops: "{{ (volume_type[_cloud][item.type | default(volume_type[_cloud].type)] in('io2', 'io3')) | ternary(item.iops, omit) }}"
  loop: "{{ _grp.volumes.data | default(_infra_item.volumes.data) | default([]) }}"
  loop_control:
    index_var: i
  register: _volumes

- name: ensure EC2 instances are present
  amazon.aws.ec2:
    region: "{{ _grp.region | default(_infra_item.region) }}"
    group_id: "{{ _grp.security_group | default(_infra_item.security_group) }}"
    instance_type: "{{ (_instance_type != '') | ternary(_instance_type, instances[_cloud][_instance.gpu|default(0)|int][_instance.cpu|default(0)|int][_instance.mem|default(0)|int] ) }}"
    image: "{{ _image }}"
    key_name: "{{ _grp.public_key_id | default(_infra_item.public_key_id) }}"
    exact_count: "{{ _grp.exact_count | default(_infra_item.exact_count) }}"
    count_tag:
      ansible_count_tag: "{{ deployment_id }}-{{ _cl_name }}-{{ _type }}"
    user_data: "{{ _grp.bootstrap[_cloud] | default(_infra_item.bootstrap[_cloud]) | default('') }}"
    assign_public_ip: "{{ _grp.public_ip | default(_infra_item.public_ip) }}"
    vpc_subnet_id: "{{ _grp.subnet | default(_infra_item.subnet) }}"
    instance_tags: "{{ _t1 | combine(_t2) | combine(_t0) }}"
    volumes: "{{ _osvol + (_volumes.results | map(attribute='ansible_facts._vol') | list) }}"
    monitoring: no
    instance_profile_name: "{{ _grp.role | default(_infra_item.role) | default('') }}"
    wait: yes
  