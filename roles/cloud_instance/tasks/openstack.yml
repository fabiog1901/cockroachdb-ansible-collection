---
- name: set vars to build openstack 'name'
  set_fact:
    _id: "{{ deployment_id }}"
    _cl_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}-{{ _idx }}"
    _type: "{{ _grp.tags.Name | default(_grp.inventory_groups[0]) | regex_replace('[^A-Za-z0-9]', '') }}"
    _image: "{{ _grp.image | default(_infra_item.image) }}"
    _user: "{{ _grp.user | default(_infra_item.user) | default('') }}"
    _instance_type: "{{ _grp.instance_type | default(_infra_item.instance_type) | default('') }}"
    _instance: "{{ _grp.instance | default(_infra_item.instance) | default({}) }}"

- name: set ansible tags
  set_fact:
    _t0:
      # ansible_id: "{{ deployment_id }}-{{ _cl_name }}-{{ _type }}-{{ item }}"
      ansible_cluster_name: "{{ _cl_name }}"
      ansible_inv_groups: "{{ _grp.inventory_groups | to_json }}"
      ansible_extra_vars: "{{ _grp.extra_vars | default({}) | to_json }}"
      cluster_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}"
      ansible_user: "{{ (_image not in images[_infra_item.cloud]) | ternary(_user, images[_infra_item.cloud][_image].user ) }}"
  loop: "{{ range(_grp.exact_count) | list }}"
  register: _t

- name: combine all tags
  set_fact:
    _t1: "{{ _grp.tags | default({}) }}"
    _t2: "{{ _infra_item.tags | default({}) }}"
    

# - debug:
#     msg:
#       - "{{ _t1 | combine(_t2) | combine( (_t.results | map(attribute='ansible_facts._t0') | list)[item] ) }}"
#       - "{{ _id|lower }}-{{ _cl_name|lower }}-{{ _type|lower }}-{{ item }}"
#   loop: "{{ range(_grp.exact_count) | list }}"

# TODO: not idempotent
- name: Ensure a new OpenStack instance
  os_server:
    name: "{{ _id|lower }}-{{ _cl_name|lower }}-{{ _type|lower }}-{{ item }}"
    state: present
    auto_ip: no  #"{{ _grp.auto_ip | default(_infra_item.auto_ip) }}"
    interface: public #"{{ _grp.interface | default(_infra_item.interface) }}"
    wait: yes

    region_name: "{{ _grp.region | default(_infra_item.region) }}"
    availability_zone: "{{ _grp.vpc_id | default(_infra_item.vpc_id) }}"
    network: "{{ _grp.subnet | default(_infra_item.subnet) }}"
    image: "{{ (_image not in images[_infra_item.cloud]) | ternary(_image, images[_infra_item.cloud][_image].id ) }}"
    key_name: "{{ _grp.public_key_id | default(_infra_item.public_key_id) }}"
    security_groups: "{{ _grp.security_group | default(_infra_item.security_group) }}"
    flavor: "{{ (_instance_type != '') | ternary(_instance_type, instances[_infra_item.cloud][_instance.gpu|default(0)][_instance.cpu|default('default')][_instance.mem|default('default')] ) }}"
    #volume_size: "{{ os_volume_size }}"
    meta: "{{ _t1 | combine(_t2) | combine( (_t.results | map(attribute='ansible_facts._t0') | list)[item] ) }}"
    userdata: "{{ _grp.bootstrap[_infra_item.cloud] | default(_infra_item.bootstrap[_infra_item.cloud]) | default('') }}"
  loop: "{{ range(_grp.exact_count) | list }}"
