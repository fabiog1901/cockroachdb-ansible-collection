---
- name: set vars to build 'name'
  ansible.builtin.set_fact:
    _id: "{{ deployment_id }}"
    _cl_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}-{{ _idx }}"
    _type: "{{ _grp.tags.Name | default(_grp.inventory_groups[0]) | default(_infra_item.inventory_groups[0]) | regex_replace('[^A-Za-z0-9]', '') }}-{{ _grp_idx }}"
    _image: "{{ _grp.image | default(_infra_item.image) }}"
    _user: "{{ _grp.user | default(_infra_item.user) | default('') }}"
    _instance_type: "{{ _grp.instance_type | default(_infra_item.instance_type) | default('') }}"
    _instance: "{{ _grp.instance | default(_infra_item.instance) | default({}) }}"
    _cloud: "{{ _grp.cloud | default(_infra_item.cloud) }}"

- name: set ansible tags
  ansible.builtin.set_fact:
    _count_tag: "{{ deployment_id|lower }}-{{ _cl_name|lower }}-{{ _type|lower }}" #"{{ (deployment_id + '-' + _cl_name + '-' + _type) | lower }}"
    _t0:
      ansible_cluster_name: "{{ _cl_name }}"
      ansible_inv_groups: "{{ _grp.inventory_groups | default([]) | union(_infra_item.inventory_groups | default([])) | to_json }}"
      extra_vars: "{{ _grp.extra_vars | default({}) | to_json }}"
      cluster_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}"
      region: "{{ _infra_item.region | default(_grp.region) | default('') }}"
      zone: "{{ _infra_item.zone | default(_grp.zone) | default('') }}"
      ansible_user: "{{ (_image not in (images[_cloud])) | ternary(_user, images[_cloud][_image].user ) }}"

- name: combine all tags
  ansible.builtin.set_fact:
    _t1: "{{ _grp.tags | default({}) }}"
    _t2: "{{ _infra_item.tags | default({}) }}"

- name: combine all tags to final tags dict
  ansible.builtin.set_fact:
    _t3: "{{ _t1 | combine(_t2) | combine(_t0) }}"

- name: identify gcp_project from credentials + randomly choose a region's zone
  ansible.builtin.set_fact:
    gcp_project: "{{ lookup('env','GCP_PROJECT') }}"

  # list all VMs using the count_tag as a filter
- name: get list of current VMs via the count_tag
  google.cloud.gcp_compute_instance_info:
    project: "{{ gcp_project }}"
    zone: "{{ _grp.region | default(_infra_item.region) }}-{{ _infra_item.zone | default(_grp.zone) | default('') }}" #"{{ region }}-{{ item }}"
    filters:
      - labels.count_tag = {{ _count_tag }}
  register: _vms

- name: set variables with current VMs count, names and zones
  ansible.builtin.set_fact:
    _vms_count: "{{ _vms.resources | count }}"
    _vms_names: "{{ (_vms.resources|count != 0) | ternary(_vms.resources|json_query('[*].name'), []) }}"
    _vms_zones: "{{ (_vms.resources|count != 0) | ternary(_vms.resources|json_query('[*].zone'), []) }}"
    _now: "{{ lookup('pipe', 'date +%s')|int - 1577836800 }}" # 1577836800 == 2020/01/01 00:00:00 UTC

- name: create OS volumes fact
  ansible.builtin.set_fact:
    _osvol:
      - auto_delete: "{{ _grp.volumes.os.delete_on_termination | default(_infra_item.volumes.os.delete_on_termination) | default(volume_type[_cloud].delete_on_termination) }}"
        boot: yes
        initialize_params:
          # disk_name: "{{ _grp.volumes.os.name | default(_infra_item.volumes.os.name) | default(volume_type[_cloud].name) }}"
          disk_size_gb: "{{ _grp.volumes.os.size | default(_infra_item.volumes.os.size) | default(volume_type[_cloud].size) }}"
          disk_type: "{{ volume_type[_cloud][_grp.volumes.os.type | default(_infra_item.volumes.os.type) | default(volume_type[_cloud].type)] }}"
          source_image: "{{ (_image not in images[_cloud]) | ternary(_image, images[_cloud][_image].id ) }}"
        
- name: create volumes fact
  ansible.builtin.set_fact:
    _vol:
      auto_delete: "{{ item.delete_on_termination | default(volume_type[_cloud].delete_on_termination) }}"
      boot: no
      type: "{{ (item.type == 'local_ssd') | ternary('SCRATCH', 'PERSISTENT') }}"
      interface: "{{ (item.type == 'local_ssd') | ternary('NVME', omit) }}"
      initialize_params:
        disk_name: "{{ (item.type == 'local_ssd') | ternary(omit, item.name | default(volume_type[_cloud].datadiskprefix + i|string )) }}"
        disk_size_gb: "{{ (item.type == 'local_ssd') | ternary(omit, item.size) }}"
        disk_type: "{{ volume_type[_cloud][item.type | default(volume_type[_cloud].type)] }}"
  register: _volumes
  loop: "{{ _grp.volumes.data | default(_infra_item.volumes.data) | default([]) }}"
  loop_control:
    index_var: i

  # the name must be unique and can't be autogenerated, so we use of count_tag, timestamp and idx
  # to ensure uniqueness
- name: create GCP VM
  google.cloud.gcp_compute_instance:
    name: "{{ _count_tag }}-{{ _now }}-{{ item }}"
    zone: "{{ _grp.region | default(_infra_item.region) }}-{{ _infra_item.zone | default(_grp.zone) | default('') }}"
    project: "{{ gcp_project }}"
    state: present
    machine_type: "{{ (_instance_type != '') | ternary(_instance_type, instances[_cloud][_instance.gpu|default(0)|int][_instance.cpu|default(0)|int][_instance.mem|default(0)|int] ) }}"
    scopes:
      - https://www.googleapis.com/auth/compute
    disks: "{{ _osvol + (_volumes.results | map(attribute='ansible_facts._vol') | list) }}"
    tags:
      items: "{{ _grp.security_group | default(_infra_item.security_group) }}"
    metadata: "{{ _t3 }}"
    labels:
      count_tag: "{{ deployment_id }}-{{ _cl_name }}-{{ _type }}"
      deployment_id: "{{ deployment_id }}"
      cluster_name: "{{ _infra_item.cluster_name | default(_cluster_name) }}"
    network_interfaces:
      - network:
          selfLink: "projects/{{ gcp_project }}/global/networks/{{ _grp.vpc_id | default(_infra_item.vpc_id) }}"
        subnetwork:
          selfLink: "projects/{{ gcp_project }}/regions/{{ _grp.region | default(_infra_item.region) }}/subnetworks/{{ _grp.subnet | default(_infra_item.subnet) }}"
        access_configs: "{{ (_grp.public_ip | default(_infra_item.public_ip))| ternary([{'name': 'External NAT', 'type': 'ONE_TO_ONE_NAT'}], omit) }}"
  when: _vms_count|int < _grp.exact_count|default(_infra_item.exact_count)|int
  loop: "{{ range(_grp.exact_count|default(_infra_item.exact_count)|int - _vms_count|int ) | list }}"

- name: delete GCP VM
  google.cloud.gcp_compute_instance:
    name: "{{ _vms_names[idx] }}"
    zone: "{{ _vms_zones[idx].split('/')[-1] }}"
    project: "{{ gcp_project }}"
    state: absent
  when: _grp.exact_count|default(_infra_item.exact_count)|int < _vms_count|int
  loop: "{{ range(_vms_count|int - _grp.exact_count|default(_infra_item.exact_count)|int) | list }}"
  loop_control:
    index_var: idx
