---
- name: Recursively remove directory
  ansible.builtin.file:
    path: "{{ certificates_dir }}/certs"
    state: absent

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ certificates_dir }}/certs"
    state: directory
    mode: "0755"

- name: Check whether ca.key exists
  stat:
    path: "{{ certificates_dir }}/ca/ca.key"
  register: _stat_result

- name: create CA key
  when: not _stat_result.stat.exists 
  block:
    - name: Create my-safe-directory if it does not exist
      ansible.builtin.file:
        path: "{{ certificates_dir }}/ca"
        state: directory
        mode: "0755"
    
    - name: create the CA key pair
      ansible.builtin.shell: |
        openssl genrsa \
          -out {{ certificates_dir }}/ca/ca.key 2048
        chmod 400 {{ certificates_dir }}/ca/ca.key
        
  
    - name: Set ca.cnf
      ansible.builtin.template:
        src: ca.cnf.j2
        dest: "{{ certificates_dir }}/ca/ca.cnf"

    - name: create the CA.crt
      ansible.builtin.shell: |
        openssl req \
          -new \
          -x509 \
          -config {{ certificates_dir }}/ca/ca.cnf \
          -key {{ certificates_dir }}/ca/ca.key \
          -out {{ certificates_dir }}/ca/ca.crt \
          -days 365 \
          -batch

- name: reset index.txt and serial.txt
  ansible.builtin.shell: |    
    rm -f {{ certificates_dir }}/certs/index.txt {{ certificates_dir }}/certs/serial.txt
    touch {{ certificates_dir }}/certs/index.txt
    echo '01' > {{ certificates_dir }}/certs/serial.txt

# Step 2. Create the certificate and key pairs for nodes
- name: Create cnf for each node
  ansible.builtin.template:
    src: node.cnf.j2
    dest: "{{ certificates_dir }}/certs/node.{{ item }}.cnf"
  loop: "{{ certificates_hosts }}"

- name: create nodes key pair
  ansible.builtin.shell: |
    openssl genrsa \
      -out {{ certificates_dir }}/certs/node.{{ item }}.key 2048
    chmod 400 {{ certificates_dir }}/certs/node.{{ item }}.key
  loop: "{{ certificates_hosts }}"

- name: create nodes certificate
  ansible.builtin.shell: |
    openssl req \
      -new \
      -config {{ certificates_dir }}/certs/node.{{ item }}.cnf \
      -key {{ certificates_dir }}/certs/node.{{ item }}.key \
      -out {{ certificates_dir }}/certs/node.{{ item }}.csr \
      -batch

    openssl ca \
      -config {{ certificates_dir }}/ca/ca.cnf \
      -keyfile {{ certificates_dir }}/ca/ca.key \
      -cert {{ certificates_dir }}/ca/ca.crt \
      -policy signing_policy \
      -extensions signing_node_req \
      -out {{ certificates_dir }}/certs/node.{{ item }}.crt \
      -outdir {{ certificates_dir }}/certs/ \
      -in {{ certificates_dir }}/certs/node.{{ item }}.csr \
      -batch
  loop: "{{ certificates_hosts }}"

# Step 3. Create the certificate and key pair for the root user
- name: Create client.cnf for root
  ansible.builtin.template:
    src: client.cnf.j2
    dest: "{{ certificates_dir }}/certs/client.{{ item }}.cnf"
  loop: "{{ certificates_usernames }}"

- name: create client key pair
  ansible.builtin.shell: |
    openssl genrsa \
      -out {{ certificates_dir }}/certs/client.{{ item }}.key 2048

    chmod 400 {{ certificates_dir }}/certs/client.{{ item }}.key
  loop: "{{ certificates_usernames }}"


- name: create client certificates
  ansible.builtin.shell: |
    openssl req \
      -new \
      -config {{ certificates_dir }}/certs/client.{{ item }}.cnf \
      -key {{ certificates_dir }}/certs/client.{{ item }}.key \
      -out {{ certificates_dir }}/certs/client.{{ item }}.csr \
      -batch

    openssl ca \
      -config {{ certificates_dir }}/ca/ca.cnf \
      -keyfile {{ certificates_dir }}/ca/ca.key \
      -cert {{ certificates_dir }}/ca/ca.crt \
      -policy signing_policy \
      -extensions signing_client_req \
      -out {{ certificates_dir }}/certs/client.{{ item }}.crt \
      -outdir {{ certificates_dir }}/certs/ \
      -in {{ certificates_dir }}/certs/client.{{ item }}.csr \
      -batch
  loop: "{{ certificates_usernames }}"
